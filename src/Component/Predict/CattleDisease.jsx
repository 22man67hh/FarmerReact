import React, { useState } from 'react';
import axios from 'axios';
import { DEEPSEEK_API } from '../Config/api';

const symptomsList = [
  'anorexia/рднреЛрдХ рдирд▓рд╛рдЧреНрдиреЗ',
  'abdominal_pain/рдкреЗрдЯ рджреБрдЦрд╛рдЗ',
  'anaemia/рд░рдХреНрддрд╛рд▓реНрдкрддрд╛',
  'abortions/рдЧрд░реНрднрдкрддрди',
  'acetone/рдПрд╕рд┐рдЯреЛрди',
  'aggression/рдЖрдХреНрд░рдордг',
  'arthrogyposis/рдЕрд╕реНрдерд┐ рд╡рд┐рдХреГрддрд┐',
  'ankylosis/рдЬреЛрдб рдХрдареЛрд░рддрд╛',
  'anxiety/рдЪрд┐рдиреНрддрд╛',
  'bellowing/рд░реБрди рдерд░реНрдХрд┐рдиреЗ',
  'blood_loss/рд░рдХреНрддрд╕реНрд░рд╛рд╡',
  'blood_poisoning/рд░рдХреНрдд рд╡рд┐рд╖рд╛рдХреНрддрддрд╛',
  'blisters/рдкрдЦрд╛рд▓рд╛',
  'colic/рдкреЗрдЯ рджреБрдЦрд╛рдЗ',
  'Condemnation_of_livers/рдпрдХреГрдд рдХреНрд╖рддрд┐',
  'conjunctivae/рдЖрдБрдЦрд╛ рд╢реНрд▓реЗрд╖реНрдорд╛',
  'coughing/рдЦреЛрдХреА',
  'depression/рдЙрджрд╛рд╕реА',
  'discomfort/рдЕрд╕рдЬрд┐рд▓реЛ',
  'dyspnea/рд╕рд╛рд╕ рдлреЗрд░реНрди рдЧрд╛рд╣реНрд░реЛ',
  'dysentery/рдкрдЦрд╛рд▓рд╛',
  'diarrhoea/рджрд╕реНрдд',
  'dehydration/рдкрд╛рдиреА рдХрдореА',
  'drooling/рдереБрдХ рдмрдЧреНрдиреБ',
  'dull/рдирд┐рд╕реНрддреЗрдЬ',
  'decreased_fertility/рдкреНрд░рдЬрдирди рдХреНрд╖рдорддрд╛ рдШрдЯреНрдиреБ',
  'diffculty_breath/рд╕рд╛рд╕ рдлреЗрд░реНрди рдХрдард┐рдирд╛рдЗ',
  'emaciation/рдХреБрдкреЛрд╖рдг',
  'encephalitis/рдорд╕реНрддрд┐рд╖реНрдХ рд╢реЛрде',
  'fever/рдЬреНрд╡рд░реЛ',
  'facial_paralysis/рдЕрдирд┐рдиреНрд╕реНрддрд╛рд╕',
  'frothing_of_mouth/рдореБрдЦрдмрд╛рдЯ рдлреЛрд╣реЛрд░ рдирд┐рд╕реНрдХрдиреБ',
  'frothing/рдлреЛрд╣реЛрд░',
  'gaseous_stomach/рдкреЗрдЯрдорд╛ рдЧреНрдпрд╛рд╕',
  'highly_diarrhoea/рдЧрдореНрднреАрд░ рджрд╕реНрдд',
  'high_pulse_rate/рдЫрд┐рдЯреЛ рдирд╛рдбреА',
  'high_temp/рдЙрдЪреНрдЪ рдЬреНрд╡рд░реЛ',
  'high_proportion/рдЙрдЪреНрдЪ рдЕрдиреБрдкрд╛рдд',
  'hyperaemia/рдЕрдзрд┐рдХ рд░рдХреНрддрд╕рдЮреНрдЪрд╛рд░',
  'hydrocephalus/рдкрд╛рдиреА рдорд╕реНрддрд┐рд╖реНрдХ',
  'isolation_from_herd/рдЭреБрдгреНрдбрдмрд╛рдЯ рдЕрд▓рдЧ',
  'infertility/рдмрд╛рдБрдЭреЛрдкрди',
  'intermittent_fever/рдЕрд╡рд┐рд░рд╛рдо рдЬреНрд╡рд░реЛ',
  'jaundice/рдкреАрд▓рд┐рдпрд╛',
  'ketosis/рдХрд┐рдЯреЛрд╕рд┐рд╕',
  'loss_of_appetite/рднреЛрдХ рдирд▓рд╛рдЧреНрдиреБ',
  'lameness/рд▓рдореНрдкрд╕рд╛рд░',
  'lack_of-coordination/рд╕рдордиреНрд╡рдп рдХрдореА',
  'lethargy/рд╕реВрдирд┐рдиреБ',
  'lacrimation/рдЖрдБрд╕реБ рдмрдЧреНрдиреБ',
  'milk_flakes/рджреВрдзрдорд╛ рдкрд╛рддрд▓реЛ рд╕рддрд╣',
  'milk_watery/рдкрд╛рдиреАрдЬрд╕реНрддреЛ рджреВрдз',
  'milk_clots/рджреВрдз рдЬрдореНрдиреБ',
  'mild_diarrhoea/рд╣рд▓реНрдХрд╛ рджрд╕реНрдд',
  'moaning/рдХрд░рд╛рдЙрдиреБ',
  'mucosal_lesions/рд╢реНрд▓реЗрд╖реНрдорд╛ рдШрд╛рдЙ',
  'milk_fever/рджреВрдз рдЬреНрд╡рд░реЛ',
  'nausea/рд╡рд╛рдиреНрддрд╛',
  'nasel_discharges/рдирд╛рдХрдмрд╛рдЯ рд╕реНрд░рд╛рд╡',
  'oedema/рд╕реВрдЬрди',
  'pain/рджреБрдЦрд╛рдЗ',
  'painful_tongue/рдЬрд┐рд╡реНрд░реЛ рджреБрдЦреНрдиреБ',
  'pneumonia/рдиреНрдпреВрдореЛрдирд┐рдпрд╛',
  'photo_sensitization/рдкреНрд░рдХрд╛рд╢ рдкреНрд░рддрд┐ рд╕рдВрд╡реЗрджрдирд╢реАрд▓рддрд╛',
  'quivering_lips/рд╣рд▓реНрд▓рд┐рдиреЗ рдУрда',
  'reduction_milk_vields/рджреВрдз рдЙрддреНрдкрд╛рджрди рдШрдЯреНрдиреБ',
  'rapid_breathing/рдЫрд┐рдЯреЛ рд╕рд╛рд╕ рдлреЗрд░реНрдиреБ',
  'rumenstasis/рд░реБрдореЗрди рд╕реНрдерд┐рд░рддрд╛',
  'reduced_rumination/рдХрдо рдЪрдмрд╛рдЙрдиреБ',
  'reduced_fertility/рдкреНрд░рдЬрдирди рдХреНрд╖рдорддрд╛ рдШрдЯреНрдиреБ',
  'reduced_fat/рдЪрд┐рд▓реНрд▓реЛ рдШрдЯреНрдиреБ',
  'reduces_feed_intake/рдЦрд╛рджреНрдпрд╛рдиреНрди рдХрдо рдЦрд╛рдиреЗ',
  'raised_breathing/рдмрдвреЗрдХреЛ рд╕рд╛рд╕',
  'stomach_pain/рдкреЗрдЯ рджреБрдЦреНрдиреБ',
  'salivation/рдереБрдХ рдмрдЧреНрдиреБ',
  'stillbirths/рдореГрдд рд╢рд┐рд╢реБ',
  'shallow_breathing/рдХрдо рд╕рд╛рд╕ рдлреЗрд░реНрдиреБ',
  'swollen_pharyngeal/рд╕реБрдиреНрдирд┐рдиреЗ рдЧрд▓рд╛ рд╕реБрдиреНрдирд┐рдиреБ',
  'swelling/рд╕реБрдЬрди',
  'saliva/рдереБрдХ',
  'swollen_tongue/рдЬрд┐рд╡реНрд░реЛ рд╕реБрдиреНрдирд┐рдиреБ',
  'tachycardia/рдЫрд┐рдЯреЛ рдирд╛рдбреА рдЪрд▓реНрдиреБ',
  'torticollis/рдШрд╛рдБрдЯреАрдХреЛ рд╡рд┐рдХреГрддрд┐',
  'udder_swelling/рд╕реНрддрди рд╕реБрдиреНрдирд┐рдиреБ',
  'udder_heat/рд╕реНрддрди рддрд╛рддреЛ рд╣реБрдиреБ',
  'udder_hardeness/рд╕реНрддрди рдХрдареЛрд░ рд╣реБрдиреБ',
  'udder_redness/рд╕реНрддрди рд░рд╛рддреЛ рд╣реБрдиреБ',
  'udder_pain/рд╕реНрддрди рджреБрдЦреНрдиреБ',
  'unwillingness_to_move/рдЪрд▓реНрди рдирдЪрд╛рд╣рдиреБ',
  'ulcers/рдШрд╛рдЙ',
  'vomiting/рд╡рд╛рдиреНрддрд╛',
  'weight_loss/рддреМрд▓ рдШрдЯреНрдиреБ',
  'weakness/рдХрдордЬреЛрд░реА',
];

const CattleDisease = () => {
  const [selectedSymptoms, setSelectedSymptoms] = useState({});
  const [diseaseInfo, setDiseaseInfo] = useState('');
  const [loading, setLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');

  const handleChange = (englishName) => {
    const currentlySelected = Object.values(selectedSymptoms).filter((val) => val === 1).length;

    if (!selectedSymptoms[englishName] && currentlySelected >= 3) {
      return; // disable further selection
    }

    setSelectedSymptoms((prev) => ({
      ...prev,
      [englishName]: prev[englishName] ? 0 : 1,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setDiseaseInfo('');
    setErrorMsg('');

    const selected = Object.entries(selectedSymptoms).filter(([_, v]) => v === 1);
    if (selected.length !== 3) {
      setErrorMsg('Please select exactly 3 symptoms.');
      return;
    }

    alert("This is only a prediction. Please contact a veterinarian for confirmation.");
    const symptomsPayload = selected.reduce((acc, [k]) => ({ ...acc, [k]: 1 }), {});
    setLoading(true);

    try {
      const { data } = await axios.post('http://127.0.0.1:5001/predict', symptomsPayload);
      const predictedDisease = data.prediction;
console.log(predictedDisease);

      setDiseaseInfo(predictedDisease);
    } catch (error) {
      console.error('Prediction failed:', error);
      setErrorMsg('An error occurred while predicting. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const selectedCount = Object.values(selectedSymptoms).filter((v) => v === 1).length;

  return (
    <div className="p-4">
      <h2 className="text-red-600 font-bold text-center mb-4">
        тЪая╕П рдпреЛ рдХреЗрд╡рд▓ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рдирдХреЛ рд▓рд╛рдЧрд┐ рд╣реЛред рдХреГрдкрдпрд╛ рдкрд╢реБ рдЪрд┐рдХрд┐рддреНрд╕рдХрд╕рдБрдЧ рддреБрд░реБрдиреНрдд рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреБрд╣реЛрд╕реНред
      </h2>

      <h3 className="font-semibold mb-2">рд▓рдХреНрд╖рдгрд╣рд░реВ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН (рдЕрдзрд┐рдХрддрдо рей)</h3>

      <div style={{ columns: 2 }} className="mb-4">
        {symptomsList.map((item) => {
          const [english, nepali] = item.split('/');
          const checked = selectedSymptoms[english] === 1;
          const disabled = !checked && selectedCount >= 3;

          return (
            <label key={english} className="block mb-1">
              <input
                type="checkbox"
                onChange={() => handleChange(english)}
                checked={checked}
                disabled={disabled}
                className="mr-2"
              />
              {english} / {nepali}
            </label>
          );
        })}
      </div>

      {errorMsg && <p className="text-red-500 text-center mb-2">{errorMsg}</p>}

      <div className="flex justify-center">
        <button
          onClick={handleSubmit}
          className="px-4 py-2 bg-green-500 text-black rounded ring disabled:opacity-50"
          disabled={loading}
        >
          {loading ? 'Predicting...' : 'Predict Cattle Diseases'}
        </button>
      </div>

      {diseaseInfo && (
        <div className="mt-6 p-4 border rounded bg-gray-100 whitespace-pre-wrap">
          <h4 className="font-bold mb-2">ЁЯза Disease Info:</h4>
        According to your selection we predict this diseases:= {diseaseInfo}
        </div>
      )}
    </div>
  );
};


export default CattleDisease;
